name: Deploy Waves Marine Navigation Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      force_deploy:
        description: 'Force deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  marine-safety-validation:
    name: Marine Safety & Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run typecheck

      - name: ESLint code quality
        run: npm run lint

      - name: Marine safety tests
        run: npm run test:marine

      - name: Navigation safety validation
        run: npm run test:navigation-safety

      - name: Emergency procedures validation
        run: npm run test:emergency-procedures

      - name: Depth validation tests
        run: npm run test:depth-validation

  security-audit:
    name: Security & Dependencies Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: NPM audit
        run: npm audit --audit-level=moderate

      - name: Check for sensitive files
        run: |
          if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" | grep -q .; then
            echo "Security issue: Key files found in repository"
            exit 1
          fi

  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [marine-safety-validation, security-audit]
    strategy:
      matrix:
        environment: [dev, staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Validate deployment artifacts
        run: npm run validate-deployment -- --env=${{ matrix.environment }}

      - name: Test Lambda packaging
        run: npm run build:lambda

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [deployment-validation]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy to development
        run: npm run deploy:dev

      - name: Post-deployment verification
        run: |
          echo "Verifying deployment health..."
          curl -f "https://api-dev.seawater.io/health" || exit 1
          echo "‚úÖ Development deployment verified"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deployment-validation]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy to staging
        run: npm run deploy:staging

      - name: Run integration tests
        run: |
          echo "Running staging integration tests..."
          curl -f "https://api-staging.seawater.io/health" || exit 1
          echo "‚úÖ Staging deployment verified"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Pre-production safety check
        run: |
          echo "üö® Final safety validation for production deployment..."
          npm run test:safety
          npm run validate-deployment -- --env=production

      - name: Deploy to production
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
            npm run deploy:production -- --force
          else
            npm run deploy:production
          fi

      - name: Production verification
        run: |
          echo "üîç Verifying production deployment..."
          curl -f "https://api.seawater.io/health" || exit 1
          echo "‚úÖ Production deployment verified"

      - name: Notify deployment success
        run: |
          echo "üåä Waves Marine Navigation Platform deployed to production successfully! ‚öì"

  rollback-production:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && contains(github.ref, 'refs/heads/main')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Emergency rollback
        run: |
          echo "üö® Initiating emergency rollback..."
          cd backend && npx serverless rollback --stage production
          echo "‚úÖ Rollback completed"

      - name: Verify rollback
        run: |
          echo "üîç Verifying rollback..."
          curl -f "https://api.seawater.io/health" || exit 1
          echo "‚úÖ Rollback verified - service restored"