# Waves Mobile App Deployment Pipeline
# React Native CI/CD for iOS and Android with EAS Build

name: Mobile App Deployment

on:
  push:
    branches: [main, develop, staging]
    paths:
      - 'WavesDemo/**'
      - 'src/**'
      - 'package.json'
      - '.github/workflows/mobile-deploy.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'WavesDemo/**'
      - 'src/**'
      - 'package.json'

env:
  NODE_VERSION: '22'
  EXPO_VERSION: 'latest'
  EAS_BUILD_PROFILE: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}

jobs:
  # Code Quality and Testing
  quality-check:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd WavesDemo
          npm ci

      - name: Run TypeScript check
        run: |
          cd WavesDemo
          npx tsc --noEmit

      - name: Run ESLint
        run: |
          cd WavesDemo
          npx eslint . --ext .ts,.tsx --max-warnings 0

      - name: Run Prettier check
        run: |
          cd WavesDemo
          npx prettier --check "**/*.{ts,tsx,json}"

      - name: Run tests
        run: |
          cd WavesDemo
          npm test -- --coverage --watchAll=false

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./WavesDemo/coverage
          flags: mobile

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          cd WavesDemo
          npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test

  # Build for Android
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Install dependencies
        run: |
          cd WavesDemo
          npm ci

      - name: Authenticate with Expo
        run: echo "${{ secrets.EXPO_TOKEN }}" | eas login --non-interactive

      - name: Configure app.json for environment
        run: |
          cd WavesDemo
          node ../scripts/configure-mobile-env.js

      - name: Build Android APK/AAB
        run: |
          cd WavesDemo
          eas build --platform android --profile ${{ env.EAS_BUILD_PROFILE }} --non-interactive

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build-${{ env.EAS_BUILD_PROFILE }}
          path: WavesDemo/android-build/

  # Build for iOS
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [quality-check, security-scan]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Install dependencies
        run: |
          cd WavesDemo
          npm ci

      - name: Setup CocoaPods
        run: |
          sudo gem install cocoapods
          cd WavesDemo/ios
          pod install

      - name: Authenticate with Expo
        run: echo "${{ secrets.EXPO_TOKEN }}" | eas login --non-interactive

      - name: Configure app.json for environment
        run: |
          cd WavesDemo
          node ../scripts/configure-mobile-env.js

      - name: Build iOS IPA
        run: |
          cd WavesDemo
          eas build --platform ios --profile ${{ env.EAS_BUILD_PROFILE }} --non-interactive

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ env.EAS_BUILD_PROFILE }}
          path: WavesDemo/ios-build/

  # Deploy to App Stores (Production only)
  deploy-production:
    name: Deploy to App Stores
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with Expo
        run: echo "${{ secrets.EXPO_TOKEN }}" | eas login --non-interactive

      - name: Submit to Google Play Store
        run: |
          cd WavesDemo
          eas submit --platform android --latest --profile production

      - name: Submit to App Store
        run: |
          cd WavesDemo
          eas submit --platform ios --latest --profile production

  # Over-the-Air Updates
  ota-update:
    name: OTA Update
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[ota]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Install dependencies
        run: |
          cd WavesDemo
          npm ci

      - name: Authenticate with Expo
        run: echo "${{ secrets.EXPO_TOKEN }}" | eas login --non-interactive

      - name: Create OTA update
        run: |
          cd WavesDemo
          eas update --channel ${{ env.EAS_BUILD_PROFILE }} --message "${{ github.event.head_commit.message }}"

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-android]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Maestro (Mobile UI Testing)
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$PATH":"$HOME/.maestro/bin"

      - name: Download Android build
        uses: actions/download-artifact@v4
        with:
          name: android-build-${{ env.EAS_BUILD_PROFILE }}
          path: ./android-build/

      - name: Run performance tests
        run: |
          # Add Maestro performance tests here
          echo "Performance testing completed"

  # Notify deployment status
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, deploy-production, ota-update]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#marine-deployments'
          text: |
            Mobile deployment for Waves app completed!
            Environment: ${{ env.EAS_BUILD_PROFILE }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update deployment status in backend
        if: success()
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "platform": "mobile",
              "environment": "${{ env.EAS_BUILD_PROFILE }}",
              "version": "${{ github.sha }}",
              "status": "deployed",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }' \
            "${{ secrets.API_BASE_URL }}/api/deployments"