# Waves Backend Docker Compose
# Complete development and production environment

version: '3.8'

services:
  # PostgreSQL with PostGIS and TimescaleDB
  postgres:
    image: timescale/timescaledb-ha:pg16-latest
    container_name: waves-postgres
    environment:
      POSTGRES_DB: waves_dev
      POSTGRES_USER: waves_user
      POSTGRES_PASSWORD: waves_password
      POSTGRES_MULTIPLE_EXTENSIONS: postgis,timescaledb,uuid-ossp,btree_gist
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - waves-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U waves_user -d waves_dev"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: waves-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - waves-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Waves Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: waves-backend
    environment:
      NODE_ENV: development
      PORT: 8080
      HOST: 0.0.0.0
      LOG_LEVEL: info
      
      # Database configuration
      DATABASE_URL: postgresql://waves_user:waves_password@postgres:5432/waves_dev
      DATABASE_SSL: false
      DATABASE_MAX_CONNECTIONS: 20
      
      # Redis configuration
      REDIS_URL: redis://redis:6379
      REDIS_DB: 0
      
      # JWT configuration
      JWT_SECRET: dev-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: dev-super-secret-refresh-key-change-in-production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # API Keys (replace with actual keys)
      MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN:-your_mapbox_token}
      NOAA_API_KEY: ${NOAA_API_KEY:-your_noaa_api_key}
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY:-your_openweather_api_key}
      STORMGLASS_API_KEY: ${STORMGLASS_API_KEY:-your_stormglass_api_key}
      
      # Safety configuration
      MIN_DEPTH_THRESHOLD: 1.0
      SAFETY_MARGIN_METERS: 0.5
      MAX_TRACK_AGE_HOURS: 24
      
      # Rate limiting
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: 900000
      
      # CORS configuration
      CORS_ORIGIN: http://localhost:3000,http://localhost:8081
      CORS_CREDENTIALS: true
      
      # File upload
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: ./uploads
      
    ports:
      - "8080:8080"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - waves-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Database initialization service
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: waves-db-migrate
    environment:
      DATABASE_URL: postgresql://waves_user:waves_password@postgres:5432/waves_dev
    command: npm run db:migrate
    networks:
      - waves-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Database seeding service
  db-seed:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: waves-db-seed
    environment:
      DATABASE_URL: postgresql://waves_user:waves_password@postgres:5432/waves_dev
    command: npm run db:seed
    networks:
      - waves-network
    depends_on:
      - db-migrate
    restart: "no"

  # PgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: waves-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@waves.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - waves-network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - development

  # Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: waves-redis-commander
    environment:
      REDIS_HOSTS: redis:redis:6379
    ports:
      - "8082:8081"
    networks:
      - waves-network
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - development

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: waves-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    networks:
      - waves-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  waves-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16