{
  "agentFactory": {
    "version": "1.0.0",
    "description": "Marine Navigation Agent System for Waves",
    "projectRoot": "/Users/jamesford/Source/Waves",
    "outputDirectory": "src/agents/generated",
    "templatesDirectory": "src/agents/templates"
  },

  "projectName": "Waves",
  "specializations": ["marine-navigation", "marine-safety", "gps-tracking", "depth-data", "emergency-protocols"],
  "defaultWorkflow": "marine-safety-validation",
  
  "wavesStandards": {
    "standardsPath": ".clinerules",
    "requiredFiles": [
      "api_standards.md",
      "mobile_standards.md",
      "geospatial_standards.md", 
      "maritime_safety_standards.md"
    ],
    "patterns": {
      "marineDataHandlers": true,
      "postgisSpatialQueries": true,
      "offlineFirst": true,
      "apiResponseFormat": "GeoJSON + Safety Metadata",
      "errorHandling": "handleMaritimeError",
      "authenticationFlow": "JWT + Marine Safety Compliance",
      "gpsAccuracyValidation": true,
      "emergencyProtocols": true
    }
  },

  "agentTypes": {
    "lambda-generator": {
      "description": "Generates Lambda handlers following method-specific patterns",
      "capabilities": [
        "generate-lambda-handlers",
        "method-specific-patterns",
        "api-response-formatting",
        "error-handling-patterns"
      ],
      "outputFormats": ["JavaScript"],
      "dependencies": ["wrapHandler", "executeQuery", "createSuccessResponse", "handleError"]
    },
    
    "component-generator": {
      "description": "Generates React TypeScript components with Flowbite integration",
      "capabilities": [
        "generate-react-components",
        "typescript-patterns",
        "flowbite-integration",
        "context-provider-patterns"
      ],
      "outputFormats": ["TypeScript", "TSX"],
      "dependencies": ["React", "Flowbite", "react-icons"]
    },
    
    "api-designer": {
      "description": "Designs API endpoints following Tim-Combo standards",
      "capabilities": [
        "design-api-endpoints",
        "response-format-standards",
        "method-specific-routing",
        "validation-patterns"
      ],
      "outputFormats": ["TypeScript"],
      "patterns": ["APIResponse<T>", "Records array wrapping", "Method-specific parameters"]
    },
    
    "schema-architect": {
      "description": "Designs database schemas with JSONB-first approach",
      "capabilities": [
        "design-database-schema",
        "jsonb-patterns",
        "typescript-type-generation",
        "data-validation-rules"
      ],
      "outputFormats": ["TypeScript", "SQL"],
      "patterns": ["JSONB columns", "Business-scoped IDs", "Exact field naming"]
    },
    
    "test-generator": {
      "description": "Generates comprehensive test suites",
      "capabilities": [
        "generate-playwright-tests",
        "component-testing",
        "api-testing",
        "e2e-workflows"
      ],
      "outputFormats": ["TypeScript"],
      "frameworks": ["Playwright", "React Testing Library", "Jest"]
    },
    
    "SecurityReviewerAgent": {
      "path": "src/agents/specialists/SecurityReviewerAgent.js",
      "description": "Comprehensive security analysis with production cost controls",
      "capabilities": [
        "security-pattern-analysis",
        "vulnerability-scanning",
        "production-readiness-assessment", 
        "cost-controlled-security",
        "compliance-validation",
        "risk-assessment",
        "progressive-security-enhancement",
        "arm64-optimization-recognition"
      ],
      "securityIntegration": {
        "patterns": "tim_combo_security_standards",
        "validation": "automated_security_validation", 
        "thresholds": "production_cost_controls",
        "compliance": "progressive_security_enhancement",
        "architecture": "serverless_arm64_aware"
      },
      "outputFormats": ["JSON", "Markdown"],
      "standards": ["OWASP", "AWS Security", "RBAC patterns", "Progressive Security Philosophy"],
      "status": "active"
    },

    "AgentClassifier": {
      "path": "src/agents/specialists/AgentClassifier.js",
      "description": "Agent classification and intelligent routing",
      "capabilities": [
        "task-classification",
        "agent-selection", 
        "workflow-optimization",
        "load-balancing"
      ],
      "outputFormats": ["JSON"],
      "status": "active"
    },

    "AgentMemoryManager": {
      "path": "src/agents/specialists/AgentMemoryManager.js",
      "description": "Agent memory and context management", 
      "capabilities": [
        "context-preservation",
        "memory-optimization",
        "state-management",
        "session-coordination"
      ],
      "outputFormats": ["JSON"],
      "status": "active"
    },

    "TestAgent": {
      "path": "src/agents/specialists/TestAgent.js",
      "description": "Comprehensive UI testing with intelligent element remapping",
      "capabilities": [
        "ui-element-remapping",
        "test-scenario-generation", 
        "cross-browser-testing",
        "visual-regression-detection",
        "test-maintenance-automation",
        "playwright-test-generation",
        "cypress-test-generation",
        "element-stability-analysis",
        "test-data-management",
        "accessibility-testing",
        "performance-testing",
        "mobile-responsive-testing",
        "component-testing",
        "integration-testing",
        "e2e-testing"
      ],
      "outputFormats": ["JavaScript", "TypeScript", "JSON"],
      "testFrameworks": ["Playwright", "Cypress", "Selenium", "Jest"],
      "browsers": ["chromium", "firefox", "webkit", "chrome", "edge"],
      "status": "active",
      "specialization": "ui-element-remapping"
    },

    "TestDataAgent": {
      "path": "src/agents/specialists/TestDataAgent.js",
      "description": "Specialized database coherence and realistic test data generation",
      "capabilities": [
        "test-data-generation",
        "database-coherence-management",
        "referential-integrity-validation",
        "scenario-based-data-creation",
        "realistic-data-patterns",
        "multi-entity-relationships",
        "data-cleanup-automation",
        "business-logic-consistency",
        "cross-environment-data-sync",
        "performance-data-simulation",
        "integration-test-scenarios",
        "employee-data-generation"
      ],
      "outputFormats": ["JSON", "SQL"],
      "status": "active",
      "specialization": "database-test-data"
    },

    "UIUXSpecialistAgent": {
      "path": "src/agents/specialists/UIUXSpecialistAgent.js",
      "description": "Design consistency and accessibility automation specialist",
      "capabilities": [
        "design-system-compliance",
        "accessibility-validation",
        "visual-consistency-analysis",
        "component-design-optimization",
        "user-experience-enhancement",
        "responsive-design-validation",
        "brand-consistency-enforcement",
        "color-contrast-analysis",
        "typography-optimization",
        "layout-pattern-standardization",
        "interaction-design-validation",
        "mobile-first-design",
        "wcag-compliance-checking",
        "design-token-management",
        "component-library-curation"
      ],
      "outputFormats": ["TypeScript", "CSS", "JSON", "Design Tokens"],
      "designSystems": ["happyhippo", "flux_systems"],
      "accessibilityStandards": ["WCAG_2_1_AA", "Section_508"],
      "status": "active",
      "specialization": "ui-ux-design"
    },

    "AgentFactoryAgent": {
      "path": "src/agents/specialists/AgentFactoryAgent.js",
      "description": "Self-bootstrapping agent generation system",
      "capabilities": [
        "agent-code-generation",
        "lambda-handler-creation",
        "react-component-generation", 
        "api-endpoint-design",
        "database-schema-architecture",
        "test-suite-generation",
        "domain-extension-creation",
        "template-driven-development",
        "standards-enforcement",
        "multi-framework-support",
        "code-pattern-replication",
        "automated-documentation"
      ],
      "outputFormats": ["JavaScript", "TypeScript", "SQL", "YAML", "JSON"],
      "frameworks": ["React", "Node.js", "AWS Lambda", "PostgreSQL"],
      "status": "active",
      "specialization": "self-bootstrapping-generation"
    },
    
    "deployment-orchestrator": {
      "description": "Orchestrates multi-environment deployments",
      "capabilities": [
        "cloudformation-generation",
        "multi-account-deployment",
        "cross-stack-references",
        "rollback-strategies"
      ],
      "outputFormats": ["YAML", "JSON"],
      "platforms": ["AWS CloudFormation", "AWS SAM"]
    }
  },

  "communicationPatterns": {
    "sequential": {
      "description": "Execute agents one after another in sequence",
      "useCases": ["Step-by-step feature building", "Pipeline processing"]
    },
    
    "parallel": {
      "description": "Execute multiple agents simultaneously",
      "useCases": ["Independent component generation", "Concurrent analysis"]
    },
    
    "pipeline": {
      "description": "Multi-stage execution with both sequential and parallel phases",
      "useCases": ["Complete feature development", "CI/CD workflows"]
    },
    
    "collaborative": {
      "description": "Agents share context and iterate together",
      "useCases": ["Complex problem solving", "Cross-domain integration"]
    }
  },

  "domainFactories": {
    "marine-navigation": {
      "description": "Core marine navigation and GPS tracking",
      "defaultContext": "MarineNavigationData",
      "defaultDashboard": "Navigation",
      "dataPattern": "GeoJSON + PostGIS",
      "standardComponents": [
        "MarineMapView",
        "DepthVisualization",
        "GPSAccuracyIndicator"
      ],
      "commonEndpoints": [
        "/api/navigation/position",
        "/api/navigation/route",
        "/api/navigation/waypoints"
      ]
    },
    
    "depth-data": {
      "description": "Crowdsourced depth readings and hazard detection",
      "defaultContext": "DepthReadingsData", 
      "defaultDashboard": "DepthReporting",
      "dataPattern": "Spatial + Confidence Scoring",
      "standardComponents": [
        "DepthReportingForm",
        "CrowdsourcedDataMap",
        "ConfidenceVisualization"
      ],
      "commonEndpoints": [
        "/api/depth/readings",
        "/api/depth/submit",
        "/api/depth/validate"
      ]
    },
    
    "emergency-protocols": {
      "description": "Marine emergency response and safety systems",
      "defaultContext": "EmergencyProtocolData",
      "defaultDashboard": "Emergency",
      "dataPattern": "Real-time + Offline Capable",
      "standardComponents": [
        "EmergencyBeaconWidget",
        "ManOverboardDetection",
        "CoastGuardIntegration"
      ],
      "commonEndpoints": [
        "/api/emergency/alert",
        "/api/emergency/contacts",
        "/api/emergency/beacon"
      ]
    },
    
    "marine-weather": {
      "description": "Marine weather and environmental data integration",
      "defaultContext": "MarineWeatherData",
      "defaultDashboard": "Weather",
      "dataPattern": "Time-series + NOAA Integration",
      "standardComponents": [
        "WeatherOverlay",
        "TideInformation",
        "MarineConditionsWidget"
      ],
      "commonEndpoints": [
        "/api/weather/marine",
        "/api/weather/tides",
        "/api/weather/forecast"
      ]
    }
  },

  "deploymentEnvironments": {
    "dev": {
      "awsAccount": "your-aws-account",
      "profile": "default",
      "lambdaBucket": "waves-marine-dev-lambda",
      "apiUrl": "https://api-dev.seawater.io",
      "database": "postgresql://localhost:5432/waves_dev",
      "mapboxToken": "your-mapbox-token",
      "noaaApiKey": "your-noaa-api-key"
    },
    
    "staging": {
      "awsAccount": "your-aws-account",
      "profile": "default",
      "lambdaBucket": "waves-marine-staging-lambda",
      "apiUrl": "https://api-staging.seawater.io",
      "database": "postgresql://staging-host:5432/waves_staging",
      "mapboxToken": "your-staging-mapbox-token",
      "noaaApiKey": "your-staging-noaa-api-key"
    },
    
    "production": {
      "awsAccount": "your-aws-account",
      "profile": "prod",
      "lambdaBucket": "waves-marine-prod-lambda",
      "apiUrl": "https://api.seawater.io",
      "database": "postgresql://prod-host:5432/waves_prod",
      "mapboxToken": "your-prod-mapbox-token",
      "noaaApiKey": "your-prod-noaa-api-key"
    }
  },

  "testCredentials": {
    "note": "Test credentials moved to environment variables for security",
    "CI_ADMIN": {
      "email": "process.env.TEST_CI_ADMIN_EMAIL",
      "password": "process.env.TEST_CI_ADMIN_PASSWORD",
      "role": "CI_Admin",
      "dashboard": "/admin/dashboard"
    },
    
    "TB_ADMIN": {
      "email": "process.env.TEST_TB_ADMIN_EMAIL", 
      "password": "process.env.TEST_TB_ADMIN_PASSWORD",
      "role": "TB_Admin",
      "dashboard": "/admin/dashboard"
    },
    
    "SUPER_ADMIN": {
      "email": "process.env.TEST_SUPER_ADMIN_EMAIL",
      "password": "process.env.TEST_SUPER_ADMIN_PASSWORD", 
      "role": "SuperAdmin",
      "dashboard": "/super"
    }
  },

  "codeGeneration": {
    "templates": {
      "lambdaHandler": {
        "requiredImports": [
          "{ wrapHandler }",
          "{ executeQuery }",
          "{ createSuccessResponse, createErrorResponse }",
          "{ handleError }"
        ],
        "parameterPatterns": {
          "GET": "queryStringParameters: queryParams = {}",
          "DELETE": "queryStringParameters: queryParams = {}",
          "POST": "body: requestBody = {}",
          "PUT": "body: requestBody = {}"
        },
        "responseFormat": "APIResponse<T>",
        "idGeneration": "business-scoped"
      },
      
      "reactComponent": {
        "requiredImports": [
          "React",
          "{ useState, useEffect, useMemo, useCallback }",
          "{ Alert, Button, Card }",
          "react-icons/hi"
        ],
        "optimizationPatterns": [
          "React.memo",
          "useMemo",
          "useCallback"
        ],
        "styleSystem": "Flowbite + TailwindCSS"
      },
      
      "apiEndpoints": {
        "format": "APIResponse<T>",
        "errorFormat": "APIErrorResponse",
        "methodPatterns": {
          "GET": "query parameters",
          "POST": "request body", 
          "PUT": "request body",
          "DELETE": "query parameters"
        }
      }
    }
  },

  "qualityChecks": {
    "typescript": {
      "command": "npx tsc --noEmit --project . --pretty",
      "directory": "src/frontend"
    },
    
    "tests": {
      "unit": "npm test",
      "e2e": "npx playwright test --reporter=line",
      "directory": "src/frontend"
    },
    
    "linting": {
      "command": "npm run lint",
      "directory": "src/frontend"
    },
    
    "security": {
      "patterns": [
        "No hardcoded secrets",
        "Proper input validation",
        "RBAC implementation",
        "Error message sanitization"
      ]
    }
  },

  "mcpIntegration": {
    "enabled": true,
    "maxConcurrentAgents": 10,
    "conversationTimeout": 300000,
    "messageQueueSize": 100,
    "coordinationPatterns": [
      "sequential",
      "parallel", 
      "pipeline",
      "collaborative"
    ]
  }
}